Index: scintilla/include/SciLexer.h
===================================================================
--- scintilla/include/SciLexer.h	(revision 1)
+++ scintilla/include/SciLexer.h	(working copy)
@@ -279,7 +279,6 @@
 #define SCE_HP_DEFNAME 100
 #define SCE_HP_OPERATOR 101
 #define SCE_HP_IDENTIFIER 102
-#define SCE_HPHP_COMPLEX_VARIABLE 104
 #define SCE_HPA_START 105
 #define SCE_HPA_DEFAULT 106
 #define SCE_HPA_COMMENTLINE 107
@@ -293,10 +292,15 @@
 #define SCE_HPA_DEFNAME 115
 #define SCE_HPA_OPERATOR 116
 #define SCE_HPA_IDENTIFIER 117
+#define SCE_HPHP_WORD1 103
+#define SCE_HPHP_WORD2 89
+#define SCE_HPHP_WORD3 88
+#define SCE_HPHP_WORD4 79
+#define SCE_HPHP_COMPLEX_VARIABLE 104
 #define SCE_HPHP_DEFAULT 118
 #define SCE_HPHP_HSTRING 119
 #define SCE_HPHP_SIMPLESTRING 120
-#define SCE_HPHP_WORD 121
+#define SCE_HPHP_IDENTIFIER 121
 #define SCE_HPHP_NUMBER 122
 #define SCE_HPHP_VARIABLE 123
 #define SCE_HPHP_COMMENT 124
Index: scintilla/include/Scintilla.iface
===================================================================
--- scintilla/include/Scintilla.iface	(revision 1)
+++ scintilla/include/Scintilla.iface	(working copy)
@@ -2443,8 +2443,6 @@
 val SCE_HP_DEFNAME=100
 val SCE_HP_OPERATOR=101
 val SCE_HP_IDENTIFIER=102
-# PHP
-val SCE_HPHP_COMPLEX_VARIABLE=104
 # ASP Python
 val SCE_HPA_START=105
 val SCE_HPA_DEFAULT=106
@@ -2460,10 +2458,15 @@
 val SCE_HPA_OPERATOR=116
 val SCE_HPA_IDENTIFIER=117
 # PHP
+val SCE_HPHP_WORD1=103
+val SCE_HPHP_WORD2=89
+val SCE_HPHP_WORD3=88
+val SCE_HPHP_WORD4=79
+val SCE_HPHP_COMPLEX_VARIABLE=104
 val SCE_HPHP_DEFAULT=118
 val SCE_HPHP_HSTRING=119
 val SCE_HPHP_SIMPLESTRING=120
-val SCE_HPHP_WORD=121
+val SCE_HPHP_IDENTIFIER=121
 val SCE_HPHP_NUMBER=122
 val SCE_HPHP_VARIABLE=123
 val SCE_HPHP_COMMENT=124
Index: scintilla/src/LexHTML.cxx
===================================================================
--- scintilla/src/LexHTML.cxx	(revision 1)
+++ scintilla/src/LexHTML.cxx	(working copy)
@@ -368,16 +368,22 @@
 
 // Update the word colour to default or keyword
 // Called when in a PHP word
-static void classifyWordHTPHP(unsigned int start, unsigned int end, WordList &keywords, Accessor &styler) {
-	char chAttr = SCE_HPHP_DEFAULT;
+static void classifyWordHTPHP(unsigned int start, unsigned int end, WordList *keywordlists[], Accessor &styler) {
+	char chAttr = SCE_HPHP_IDENTIFIER;
 	bool wordIsNumber = IsADigit(styler[start]) || (styler[start] == '.' && start+1 <= end && IsADigit(styler[start+1]));
 	if (wordIsNumber)
 		chAttr = SCE_HPHP_NUMBER;
 	else {
 		char s[100];
 		GetTextSegment(styler, start, end, s, sizeof(s));
-		if (keywords.InList(s))
-			chAttr = SCE_HPHP_WORD;
+		if (keywordlists[4]->InList(s))
+			chAttr = SCE_HPHP_WORD1;
+        else if (keywordlists[6]->InList(s))
+            chAttr = SCE_HPHP_WORD2;
+        else if (keywordlists[7]->InList(s))
+            chAttr = SCE_HPHP_WORD3;
+        else if (keywordlists[8]->InList(s))
+            chAttr = SCE_HPHP_WORD4;
 	}
 	styler.ColourTo(end, chAttr);
 }
@@ -535,7 +541,6 @@
 	WordList &keywords2 = *keywordlists[1];
 	WordList &keywords3 = *keywordlists[2];
 	WordList &keywords4 = *keywordlists[3];
-	WordList &keywords5 = *keywordlists[4];
 	WordList &keywords6 = *keywordlists[5]; // SGML (DTD) keywords
 
 	// Lexer for HTML requires more lexical states (8 bits worth) than most lexers
@@ -923,8 +928,8 @@
 			case SCE_HP_WORD:
 				classifyWordHTPy(styler.GetStartSegment(), i - 1, keywords4, styler, prevWord, inScriptType);
 				break;
-			case SCE_HPHP_WORD:
-				classifyWordHTPHP(styler.GetStartSegment(), i - 1, keywords5, styler);
+			case SCE_HPHP_IDENTIFIER:
+				classifyWordHTPHP(styler.GetStartSegment(), i - 1, keywordlists, styler);
 				break;
 			case SCE_H_XCCOMMENT:
 				styler.ColourTo(i - 1, state);
@@ -1653,9 +1658,9 @@
 			}
 			break;
 			///////////// start - PHP state handling
-		case SCE_HPHP_WORD:
+		case SCE_HPHP_IDENTIFIER:
 			if (!IsAWordChar(ch)) {
-				classifyWordHTPHP(styler.GetStartSegment(), i - 1, keywords5, styler);
+				classifyWordHTPHP(styler.GetStartSegment(), i - 1, keywordlists, styler);
 				if (ch == '/' && chNext == '*') {
 					i++;
 					state = SCE_HPHP_COMMENT;
@@ -1785,7 +1790,7 @@
 			if (IsADigit(ch) || (ch == '.' && IsADigit(chNext))) {
 				state = SCE_HPHP_NUMBER;
 			} else if (IsAWordStart(ch)) {
-				state = SCE_HPHP_WORD;
+				state = SCE_HPHP_IDENTIFIER;
 			} else if (ch == '/' && chNext == '*') {
 				i++;
 				state = SCE_HPHP_COMMENT;
@@ -1872,8 +1877,8 @@
 	case SCE_HP_WORD:
 		classifyWordHTPy(styler.GetStartSegment(), lengthDoc - 1, keywords4, styler, prevWord, inScriptType);
 		break;
-	case SCE_HPHP_WORD:
-		classifyWordHTPHP(styler.GetStartSegment(), lengthDoc - 1, keywords5, styler);
+	case SCE_HPHP_IDENTIFIER:
+		classifyWordHTPHP(styler.GetStartSegment(), lengthDoc - 1, keywordlists, styler);
 		break;
 	default:
 		StateToPrint = statePrintForState(state, inScriptType);
@@ -1912,8 +1917,11 @@
 	"JavaScript keywords",
 	"VBScript keywords",
 	"Python keywords",
-	"PHP keywords",
+	"PHP keywords 1",
 	"SGML and DTD keywords",
+    "PHP keywords 2",
+    "PHP keywords 3",
+    "PHP keywords 4",
 	0,
 };
 
@@ -1922,8 +1930,11 @@
 	"", //Unused
 	"", //Unused
 	"", //Unused
-	"PHP keywords",
+	"PHP keywords 1",
 	"", //Unused
+    "PHP keywords 2",
+    "PHP keywords 3",
+    "PHP keywords 4",
 	0,
 };
 
Index: scite/src/SciTEBase.h
===================================================================
--- scite/src/SciTEBase.h	(revision 1)
+++ scite/src/SciTEBase.h	(working copy)
@@ -825,6 +825,7 @@
 	const char *GetNextPropItem(const char *pStart, char *pPropItem, int maxLen);
 	void ForwardPropertyToEditor(const char *key);
 	void DefineMarker(int marker, int markerType, ColourDesired fore, ColourDesired back);
+    void DefineMarkerEx(int marker, int markerType, long fore, long back);
 	void ReadAPI(const SString &fileNameForExtension);
 	SString FindLanguageProperty(const char *pattern, const char *defaultValue = "");
 	virtual void ReadProperties();
Index: scite/src/SciTEProps.cxx
===================================================================
--- scite/src/SciTEProps.cxx	(revision 1)
+++ scite/src/SciTEProps.cxx	(working copy)
@@ -468,6 +468,11 @@
 	SendEditor(SCI_MARKERSETFORE, marker, fore.AsLong());
 	SendEditor(SCI_MARKERSETBACK, marker, back.AsLong());
 }
+void SciTEBase::DefineMarkerEx(int marker, int markerType, long fore, long back) {
+	SendEditor(SCI_MARKERDEFINE, marker, markerType);
+	SendEditor(SCI_MARKERSETFORE, marker, fore);
+	SendEditor(SCI_MARKERSETBACK, marker, back);
+}
 
 static int FileLength(const char *path) {
 	int len = 0;
@@ -771,6 +776,7 @@
 	SendChildren(SCI_SETMULTIPLESELECTION, props.GetInt("selection.multiple", 1));
 	SendChildren(SCI_SETADDITIONALSELECTIONTYPING, props.GetInt("selection.additional.typing", 1));
 	SendChildren(SCI_SETADDITIONALCARETSBLINK, props.GetInt("caret.additional.blinks", 1));
+    SendChildren(SCI_SETADDITIONALCARETFORE, ColourOfProperty(props, "caret.additional.fore", ColourDesired(0x33, 0x66, 0xff)));
 	SendChildren(SCI_SETVIRTUALSPACEOPTIONS, props.GetInt("virtual.space"));
 
 	SendEditor(SCI_SETMOUSEDWELLTIME,
@@ -861,26 +867,26 @@
 	int selectionAdditionalAlpha = (selectionAlpha == SC_ALPHA_NOALPHA) ? SC_ALPHA_NOALPHA : selectionAlpha / 2;
 	SendChildren(SCI_SETADDITIONALSELALPHA, props.GetInt("selection.additional.alpha", selectionAdditionalAlpha));
 
-	SString foldColour = props.Get("fold.margin.colour");
+	SString foldColour = props.GetExpanded("fold.margin.colour");
 	if (foldColour.length()) {
 		SendChildren(SCI_SETFOLDMARGINCOLOUR, 1, ColourFromString(foldColour));
 	} else {
 		SendChildren(SCI_SETFOLDMARGINCOLOUR, 0, 0);
 	}
-	SString foldHiliteColour = props.Get("fold.margin.highlight.colour");
+	SString foldHiliteColour = props.GetExpanded("fold.margin.highlight.colour");
 	if (foldHiliteColour.length()) {
 		SendChildren(SCI_SETFOLDMARGINHICOLOUR, 1, ColourFromString(foldHiliteColour));
 	} else {
 		SendChildren(SCI_SETFOLDMARGINHICOLOUR, 0, 0);
 	}
 
-	SString whitespaceFore = props.Get("whitespace.fore");
+	SString whitespaceFore = props.GetExpanded("whitespace.fore");
 	if (whitespaceFore.length()) {
 		SendChildren(SCI_SETWHITESPACEFORE, 1, ColourFromString(whitespaceFore));
 	} else {
 		SendChildren(SCI_SETWHITESPACEFORE, 0, 0);
 	}
-	SString whitespaceBack = props.Get("whitespace.back");
+	SString whitespaceBack = props.GetExpanded("whitespace.back");
 	if (whitespaceBack.length()) {
 		SendChildren(SCI_SETWHITESPACEBACK, 1, ColourFromString(whitespaceBack));
 	} else {
@@ -1091,53 +1097,51 @@
 
 	SendEditor(SCI_SETMARGINMASKN, 2, SC_MASK_FOLDERS);
 	SendEditor(SCI_SETMARGINSENSITIVEN, 2, 1);
+    
+    long symbolsFore, symbolsBack;
+    symbolsFore = ColourOfProperty(props, "fold.symbols.fore", ColourDesired(0x80, 0x80, 0x80));
+    symbolsBack = ColourOfProperty(props, "fold.symbols.back", ColourDesired(0xff, 0xff, 0xff));
 
 	switch (props.GetInt("fold.symbols")) {
 	case 0:
 		// Arrow pointing right for contracted folders, arrow pointing down for expanded
-		DefineMarker(SC_MARKNUM_FOLDEROPEN, SC_MARK_ARROWDOWN,
-		             ColourDesired(0, 0, 0), ColourDesired(0, 0, 0));
-		DefineMarker(SC_MARKNUM_FOLDER, SC_MARK_ARROW,
-		             ColourDesired(0, 0, 0), ColourDesired(0, 0, 0));
-		DefineMarker(SC_MARKNUM_FOLDERSUB, SC_MARK_EMPTY,
-		             ColourDesired(0, 0, 0), ColourDesired(0, 0, 0));
-		DefineMarker(SC_MARKNUM_FOLDERTAIL, SC_MARK_EMPTY,
-		             ColourDesired(0, 0, 0), ColourDesired(0, 0, 0));
-		DefineMarker(SC_MARKNUM_FOLDEREND, SC_MARK_EMPTY,
-		             ColourDesired(0xff, 0xff, 0xff), ColourDesired(0, 0, 0));
-		DefineMarker(SC_MARKNUM_FOLDEROPENMID, SC_MARK_EMPTY,
-		             ColourDesired(0xff, 0xff, 0xff), ColourDesired(0, 0, 0));
-		DefineMarker(SC_MARKNUM_FOLDERMIDTAIL, SC_MARK_EMPTY, ColourDesired(0xff, 0xff, 0xff), ColourDesired(0, 0, 0));
+		DefineMarkerEx(SC_MARKNUM_FOLDEROPEN, SC_MARK_ARROWDOWN, symbolsBack, symbolsFore);
+		DefineMarkerEx(SC_MARKNUM_FOLDER, SC_MARK_ARROW, symbolsBack, symbolsFore);
+		DefineMarkerEx(SC_MARKNUM_FOLDERSUB, SC_MARK_EMPTY, symbolsBack, symbolsFore);
+		DefineMarkerEx(SC_MARKNUM_FOLDERTAIL, SC_MARK_EMPTY, symbolsBack, symbolsFore);
+		DefineMarkerEx(SC_MARKNUM_FOLDEREND, SC_MARK_EMPTY, symbolsBack, symbolsFore);
+		DefineMarkerEx(SC_MARKNUM_FOLDEROPENMID, SC_MARK_EMPTY, symbolsBack, symbolsFore);
+		DefineMarkerEx(SC_MARKNUM_FOLDERMIDTAIL, SC_MARK_EMPTY, symbolsBack, symbolsFore);
 		break;
 	case 1:
 		// Plus for contracted folders, minus for expanded
-		DefineMarker(SC_MARKNUM_FOLDEROPEN, SC_MARK_MINUS, ColourDesired(0xff, 0xff, 0xff), ColourDesired(0, 0, 0));
-		DefineMarker(SC_MARKNUM_FOLDER, SC_MARK_PLUS, ColourDesired(0xff, 0xff, 0xff), ColourDesired(0, 0, 0));
-		DefineMarker(SC_MARKNUM_FOLDERSUB, SC_MARK_EMPTY, ColourDesired(0xff, 0xff, 0xff), ColourDesired(0, 0, 0));
-		DefineMarker(SC_MARKNUM_FOLDERTAIL, SC_MARK_EMPTY, ColourDesired(0xff, 0xff, 0xff), ColourDesired(0, 0, 0));
-		DefineMarker(SC_MARKNUM_FOLDEREND, SC_MARK_EMPTY, ColourDesired(0xff, 0xff, 0xff), ColourDesired(0, 0, 0));
-		DefineMarker(SC_MARKNUM_FOLDEROPENMID, SC_MARK_EMPTY, ColourDesired(0xff, 0xff, 0xff), ColourDesired(0, 0, 0));
-		DefineMarker(SC_MARKNUM_FOLDERMIDTAIL, SC_MARK_EMPTY, ColourDesired(0xff, 0xff, 0xff), ColourDesired(0, 0, 0));
+		DefineMarkerEx(SC_MARKNUM_FOLDEROPEN, SC_MARK_MINUS, symbolsBack, symbolsFore);
+		DefineMarkerEx(SC_MARKNUM_FOLDER, SC_MARK_PLUS, symbolsBack, symbolsFore);
+		DefineMarkerEx(SC_MARKNUM_FOLDERSUB, SC_MARK_EMPTY, symbolsBack, symbolsFore);
+		DefineMarkerEx(SC_MARKNUM_FOLDERTAIL, SC_MARK_EMPTY, symbolsBack, symbolsFore);
+		DefineMarkerEx(SC_MARKNUM_FOLDEREND, SC_MARK_EMPTY, symbolsBack, symbolsFore);
+		DefineMarkerEx(SC_MARKNUM_FOLDEROPENMID, SC_MARK_EMPTY, symbolsBack, symbolsFore);
+		DefineMarkerEx(SC_MARKNUM_FOLDERMIDTAIL, SC_MARK_EMPTY, symbolsBack, symbolsFore);
 		break;
 	case 2:
 		// Like a flattened tree control using circular headers and curved joins
-		DefineMarker(SC_MARKNUM_FOLDEROPEN, SC_MARK_CIRCLEMINUS, ColourDesired(0xff, 0xff, 0xff), ColourDesired(0x40, 0x40, 0x40));
-		DefineMarker(SC_MARKNUM_FOLDER, SC_MARK_CIRCLEPLUS, ColourDesired(0xff, 0xff, 0xff), ColourDesired(0x40, 0x40, 0x40));
-		DefineMarker(SC_MARKNUM_FOLDERSUB, SC_MARK_VLINE, ColourDesired(0xff, 0xff, 0xff), ColourDesired(0x40, 0x40, 0x40));
-		DefineMarker(SC_MARKNUM_FOLDERTAIL, SC_MARK_LCORNERCURVE, ColourDesired(0xff, 0xff, 0xff), ColourDesired(0x40, 0x40, 0x40));
-		DefineMarker(SC_MARKNUM_FOLDEREND, SC_MARK_CIRCLEPLUSCONNECTED, ColourDesired(0xff, 0xff, 0xff), ColourDesired(0x40, 0x40, 0x40));
-		DefineMarker(SC_MARKNUM_FOLDEROPENMID, SC_MARK_CIRCLEMINUSCONNECTED, ColourDesired(0xff, 0xff, 0xff), ColourDesired(0x40, 0x40, 0x40));
-		DefineMarker(SC_MARKNUM_FOLDERMIDTAIL, SC_MARK_TCORNERCURVE, ColourDesired(0xff, 0xff, 0xff), ColourDesired(0x40, 0x40, 0x40));
+		DefineMarkerEx(SC_MARKNUM_FOLDEROPEN, SC_MARK_CIRCLEMINUS, symbolsBack, symbolsFore);
+		DefineMarkerEx(SC_MARKNUM_FOLDER, SC_MARK_CIRCLEPLUS, symbolsBack, symbolsFore);
+		DefineMarkerEx(SC_MARKNUM_FOLDERSUB, SC_MARK_VLINE, symbolsBack, symbolsFore);
+		DefineMarkerEx(SC_MARKNUM_FOLDERTAIL, SC_MARK_LCORNERCURVE, symbolsBack, symbolsFore);
+		DefineMarkerEx(SC_MARKNUM_FOLDEREND, SC_MARK_CIRCLEPLUSCONNECTED, symbolsBack, symbolsFore);
+		DefineMarkerEx(SC_MARKNUM_FOLDEROPENMID, SC_MARK_CIRCLEMINUSCONNECTED, symbolsBack, symbolsFore);
+		DefineMarkerEx(SC_MARKNUM_FOLDERMIDTAIL, SC_MARK_TCORNERCURVE, symbolsBack, symbolsFore);
 		break;
 	case 3:
 		// Like a flattened tree control using square headers
-		DefineMarker(SC_MARKNUM_FOLDEROPEN, SC_MARK_BOXMINUS, ColourDesired(0xff, 0xff, 0xff), ColourDesired(0x80, 0x80, 0x80));
-		DefineMarker(SC_MARKNUM_FOLDER, SC_MARK_BOXPLUS, ColourDesired(0xff, 0xff, 0xff), ColourDesired(0x80, 0x80, 0x80));
-		DefineMarker(SC_MARKNUM_FOLDERSUB, SC_MARK_VLINE, ColourDesired(0xff, 0xff, 0xff), ColourDesired(0x80, 0x80, 0x80));
-		DefineMarker(SC_MARKNUM_FOLDERTAIL, SC_MARK_LCORNER, ColourDesired(0xff, 0xff, 0xff), ColourDesired(0x80, 0x80, 0x80));
-		DefineMarker(SC_MARKNUM_FOLDEREND, SC_MARK_BOXPLUSCONNECTED, ColourDesired(0xff, 0xff, 0xff), ColourDesired(0x80, 0x80, 0x80));
-		DefineMarker(SC_MARKNUM_FOLDEROPENMID, SC_MARK_BOXMINUSCONNECTED, ColourDesired(0xff, 0xff, 0xff), ColourDesired(0x80, 0x80, 0x80));
-		DefineMarker(SC_MARKNUM_FOLDERMIDTAIL, SC_MARK_TCORNER, ColourDesired(0xff, 0xff, 0xff), ColourDesired(0x80, 0x80, 0x80));
+		DefineMarkerEx(SC_MARKNUM_FOLDEROPEN, SC_MARK_BOXMINUS, symbolsBack, symbolsFore);
+		DefineMarkerEx(SC_MARKNUM_FOLDER, SC_MARK_BOXPLUS, symbolsBack, symbolsFore);
+		DefineMarkerEx(SC_MARKNUM_FOLDERSUB, SC_MARK_VLINE, symbolsBack, symbolsFore);
+		DefineMarkerEx(SC_MARKNUM_FOLDERTAIL, SC_MARK_LCORNER, symbolsBack, symbolsFore);
+		DefineMarkerEx(SC_MARKNUM_FOLDEREND, SC_MARK_BOXPLUSCONNECTED, symbolsBack, symbolsFore);
+		DefineMarkerEx(SC_MARKNUM_FOLDEROPENMID, SC_MARK_BOXMINUSCONNECTED, symbolsBack, symbolsFore);
+		DefineMarkerEx(SC_MARKNUM_FOLDERMIDTAIL, SC_MARK_TCORNER, symbolsBack, symbolsFore);
 		break;
 	}
 
