##################################################
# 风格（包括字体、配色和界面效果）
##################################################

import style/one

##################################################
# 常量
##################################################

# [user] 本地化文件
system.locale=zh_CN
# [user] 英文字母定义
chars.alpha=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
# [user] 数字定义
chars.number=0123456789
# [user] 英文字母加数字定义
chars.alnum=$(chars.alpha)$(chars.number)

##################################################
# 标题栏
##################################################

# 标题栏是否显示全路径
title.full.path=1
# 标题栏是否显示缓冲号
title.show.buffers=0

##################################################
# 工具栏
##################################################

# 工具栏是否可见
toolbar.visible=1

##################################################
# TAB 栏
##################################################

# TAB 栏是否可见
tabbar.visible=1
# TAB 栏在只有一个文件缓冲时是否隐藏
tabbar.hide.one=0
# TAB 栏是否采用多行的方式显示
tabbar.multiline=1
# TAB 栏最大文件缓冲数，范围为 1 至 100
buffers=30

##################################################
# 行号栏（包含了书签栏）
##################################################

# 行号栏是否可见
line.margin.visible=1

##################################################
# 折叠栏
##################################################

# 是否启用折叠功能
fold=1
# 折叠标志，0 为箭头，1 为加减符号，2 为树状（节点为圆点），3 为树状（节点为田字）
fold.symbols=3
# 折叠线标志，可用的值为：2, 4, 8, 16, 64
fold.flags=16
# 对 HTML, XML, Lua, C++ 或类似的文件，是否使用紧凑型折叠（把空白行合并起来）
fold.compact=0
# 打开 SciTE 时是否默认将文本折叠
fold.on.open=0

##################################################
# 文本区、输出区
##################################################

# 文本区与输出区是否左右放置（1）还是上下放置（0）
split.vertical=0
# 输出区是否默认隐藏
output.initial.hide=1

#对页面进行编码检查并转换
utf8.check=1
# 文本区字符默认编码
#code.page=65001
code.page=936
# 文本区是否显示水平滚动条
horizontal.scrollbar=1
# 文本区水平滚动条可以滚动的宽度
horizontal.scroll.width=
# 文本区水平滚动条是否自动伸展出去
horizontal.scroll.width.tracking=1

# 输出区字符编码
output.code.page=936
# 输出区左右放置时的水平宽度
output.horizontal.size=250
# 输出区上下放置时的垂直高度
output.vertical.size=200
# 输出区是否显示水平滚动条
output.horizontal.scrollbar=1
# 输出区水平滚动条可以滚动的宽度
output.horizontal.scroll.width=
# 输出区水平滚动条是否自动伸展出去
output.horizontal.scroll.tracking=1
# 输出区是否自动滚屏
output.scroll=1

##################################################
# API 提示栏
##################################################


[Status Bar]

# 状态栏是否可见
statusbar.visible=1
# 状态栏点击切换数
statusbar.number=2
#statusbar.text.{number}=
statusbar.text.1= Line:$(LineNumber)  Column:$(ColumnNumber) | \
$(BufferLength) chars in $(NbOfLines) lines, $(SelLength) chars Selected | \
Encoding:$(code.page)  EOLMode:$(EOLMode)
statusbar.text.2=$(FilePath)  Modified Time:$(FileDate) $(FileTime) | $(FileAttr) | \

##################################################
# 光标
##################################################

# 设置是否所有的光标都跳动。0 意味着只有主光标跳动，默认为 1
caret.additional.blinks=1
# 光标闪动周期，单位为毫秒
caret.period=500
# 是否启用光标粘滞
caret.sticky=0
# 光标策略相关
caret.policy.xslop=1
caret.policy.width=20
caret.policy.xstrict=0
caret.policy.xeven=0
caret.policy.xjumps=0
caret.policy.yslop=1
caret.policy.lines=1
caret.policy.ystrict=1
caret.policy.yeven=1
caret.policy.yjumps=0

##################################################
# 缩进向导
##################################################

# 是否在缩进空白内每 indent.size 列后显示缩进向导
view.indentation.guides=1
# 在缩进内的空白是否可见
view.indentation.whitespace=0

##################################################
# 边缘模式
##################################################

# 边缘模式采用的方式，0 不提示长行，1 使用垂直线提示长行（edge.column），2 使用背景色的方式提示长行中超出 edge.column 的部分
edge.mode=0
# 边缘模式起作用的列数
edge.column=100

##################################################
# 其它页面控制
##################################################

# 是否显示空白字符
view.whitespace=0

##################################################
# 基本行为
##################################################

# 窗口在启动时是否最大化
position.maximize=0
# 窗口距离屏幕左边几个像素
position.left=0
# 窗口距离屏幕顶部几个像素
position.top=0
# 窗口宽度，-1 为全部宽度
position.width=-1
# 窗口高度，-1 为全部高度
position.height=-1
# 按文件名找文件未找到时，尝试使用的扩展名
source.default.extensions=.php|.phtml
# 未定义的文件默认当成何种扩展名来解析
default.file.ext=.php
# 最大文件大小，单位为字节。超过该值将提示大文件是否要打开
max.file.size=16777216
# 默认换行符模式，LF 为 Unix 模式，CR 为 Mac 格式，CRLF 为 Windows 格式
eol.mode=LF
# 是否使用 Ctrl 键以启动多处选择
selection.multiple=1
# 是否同步多处选择文本的键入
selection.additional.typing=1
# 是否允许光标进入虚拟空间。1 允许矩形选择时进入，2 允许方向键和鼠标进入，3 允许两者
virtual.space=1
# 是否只启动一个 SciTE 进程（多文件采用 TAB 栏的形式）
check.if.already.open=1
# 当最后一个 TAB 关闭时，是否关闭 SciTE
quit.on.close.last=0
# 最小化时是否最小化到系统托盘
minimize.to.tray=0
# 全屏时是否隐藏菜单栏
full.screen.hides.menu=1
# 窗口在多个 SciTE 窗口启动时是否平铺
position.tile=0
# 保存文件前是否先删除原文件
save.deletes.first=0
# 执行前是否清除输出区
clear.before.execute=1
# 保存的时候是否删除文件尾的空白
strip.trailing.spaces=0
# 保存时是否保证文件尾部有一空行
ensure.final.line.end=0
# 是否保证保存时使用一致的换行符
ensure.consistent.line.ends=1
# 打开文件的对话框是否在当前文件所在的目录打开
open.dialog.in.file.directory=1
# 目录上的 properties 文件功能是否启用
properties.directory.enable=1
# 当一个命令完成时，输出它所耗费的时间
time.commands=1
# home 和 shift + home 的行为
vc.home.key=1
# 用来代表控制符的字符
control.char.symbol=
# 当关闭文件时，如果有文件没有保存，是否弹出“是否确定”的对话框。如果不弹出，默认为保存文件
are.you.sure=1
# 当编译代码时，是否弹出对话框询问是否保存文件，如果不弹出，则自动保存文件
are.you.sure.for.build=0
# 当编译代码时，是否保存所有打开的文件缓冲（默认只会保存当前文件缓冲）
save.all.for.build=0
# 重加载文件时是否提示确认框
are.you.sure.on.reload=1
# 当 SciTE 获得焦点时，是否检查文件是否已经被其它进程修改
load.on.activate=1
# 当 SciTE 失去焦点时，是否保存文件
save.on.deactivate=0
# 是否延迟撤销和重做操作
undo.redo.lazy=0
# 是否使用调色板，以显示多于8位的颜色
use.palette=1
# 页面绘制时是否启用缓冲型绘制（缓冲到位图缓冲再输出）。缓冲型绘制闪动比较小，但比较慢
buffered.draw=1
# 是否使用两阶段绘制（绘制效果更好，但比较慢）
two.phase.draw=1
# 重加载文件时是否保留 undo 历史
reload.preserves.undo=1
# 是否让打开的文件只读化
read.only=0
# 当查看 SciTE 的帮助时，调用的命令
command.scite.help="file://$(SciteDefaultHome)/other/help/scite.htm"
# 当查看 SciTE 的帮助时，调用的命令对应的子系统号
command.scite.help.subsystem=2
# 设为 0，将允许在最后一行再往下拖滚动条
end.at.last.line=0
# TAB 栏用 Ctrl + Tab 替换时，是否按回转方式（0 为顺序方式）
buffers.zorder.switching=0
# 出错时是否可以跟进源码中对应的行
error.select.line=1

# 源文件
source.files=*.css;*.c;*.cc;*.cpp;*.cxx;*.cs;*.h;*.hh;*.hxx;*.hpp;*.php;\
*.idl;*.odl;*.rc;*.rc2;*.dlg;*.def;\
*.vb;*.vbs;*.bas;*.frm;*.cls;*.ctl;\
*.java;*.js;*.py;*.pl;*.rb;*.cgi;*.lua;*.conf;\
make*;*.mak;\
*.properties;*.html;*.htm;*.xml;*.iface;*.bat;\

if PLAT_WIN
	all.files=All Files (*.*)|*.*|
if PLAT_GTK
	all.files=All Files (*)|*|Hidden Files (.*)|.*|

#打开文件类型
open.filter=\
All Source|$(source.files)|\
$(all.files)\
$(filter.conf)\
$(filter.cpp)\
$(filter.css)\
$(filter.java)\
$(filter.js)\
$(filter.lua)\
$(filter.perl)\
$(filter.php)\
$(filter.properties)\
$(filter.sql)\
$(filter.tex)\
$(filter.text)\
$(filter.html)\


# 可见性策略
#visible.policy.strict=
#visible.policy.slop=
#visible.policy.lines=

# 文本区对文本布局是否缓存，以及缓存级别。可用值：0, 1, 2, 3，其中 3 缓存程度最高（对整个文件布局进行缓存），速度最快，但占内存多
cache.layout=3
# 输出区对文本布局是否缓存，以及缓存级别。可用值：0, 1, 2, 3，其中 3 缓存程度最高（对整个文件布局进行缓存），速度最快，但占内存多
output.cache.layout=3
# 文本区放大字体时的放大系数，0 为默认
magnification=0
# 输出区放大字体时默认放大系数
output.magnification=0
# 是否检查并提示括号匹配
braces.check=1
# 是否前后检查并提示括号匹配
braces.sloppy=1
# 命令“使用等宽字体”调用的字体
#font.monospace=
# win 95 的一个 bug
#win95.death.delay=500

##################################################
# 查找替换相关
##################################################

# 替换时是否显示高级部分
find.replace.advanced=1
# 查找替换时是否勾起 match case
find.replace.matchcase=0
# 查找替换时是否勾起 regexp
find.replace.regexp=0
# 查找替换时是否使用 posix 格式的 regexp
find.replace.regexp.posix=0
# 查找替换时是否勾起 wrap around
find.replace.wrap=1
# 查找替换时是否勾起 transform backslash expressions
find.replace.escape=0
# 查找替换时是否让 replace with 输入框获取焦点
find.replacewith.focus=1
# ？？？
#find.command=
# ？？？
#find.input=
# ？？？
find.files=*.php *.phtml *.html *.css *.js *.inc
# ？？？
#find.in.dot=
# ？？？
#find.in.binary=
# “在文件中查找”的命令找到时，是否关闭查找窗口
find.in.files.close.on.find=0

##################################################
# 会话相关
##################################################

# 退出时是否保存会话信息
save.session=1
# 以空的方式打开 SciTE 时是否自动恢复会话
save.recent=1
# 以空的方式打开 SciTE 时是否恢复光标位置
save.position=0
# 会话文件是否记录标签信息
session.bookmarks=0
# 会话文件是否记录折叠信息
session.folds=0

##################################################
# 打印相关
##################################################

#print.magnification=
#print.colour.mode=
#print.margins=
#print.header.format=
#print.footer.format=
#print.header.style=
#print.footer.style=

##################################################
# 导出相关
##################################################

#export.keep.ext=

#export.html.wysiwyg=1
#export.html.tabs
#export.html.folding
#export.html.styleused=1
#export.html.title.fullpath

#export.rtf.wysiwyg
#export.rtf.tabs
#export.rtf.font.face
#export.rtf.font.size
#export.rtf.tabsize

#export.pdf.magnification
#export.pdf.font=Courier
#export.pdf.pagesize
#export.pdf.margins

#export.tex.title.fullpath

#export.xml.collapse.spaces
#export.xml.collapse.lines

##################################################
# 警告相关
##################################################

#warning.findwrapped
#warning.notfound
#warning.wrongfile
#warning.executeok
#warning.executeko
#warning.nootherbookmark

##################################################
# 语言菜单
##################################################

menu.language=\
Text|txt||\
HTML|htm||\
PHP|php||\
TPL|tpl||\
CSS|css||\
C|c||\
C++|cpp||\
Java|java||\
JavaScript|js||\
Python|py||\
Lua|lua||\
SQL|sql||\
Props|ini||\
Conf|conf||

##################################################
# 换行相关
##################################################

# 文本区是否启用自动换行
wrap=1
# 输出区是否启用自动换行
output.wrap=1
# 自动换行方式，1 为按单词换行，2 为按字母换行
wrap.style=2
# 换行后缩进几个空格。0 为不缩进
wrap.visual.startindent=0
# 换行缩进模式，值为 0、1、2，分别对应顶首、对齐、缩入
wrap.indent.mode=2
# 换行标志，0 为不显示标志，1 为在换行行尾显示标志，2 为在换行行首显示标志，3 为同时在行首和行尾显示标志
wrap.visual.flags=1
# 换行标志的位置，0 为靠近边框，1 让结束符靠近文本，2 让开始符靠近文本，3 为所有标志符靠近文本
wrap.visual.flags.location=0
# 换行的某种行为？？？
#wrap.aware.home.end.keys=
# 对已有文件，是否根据上下文选择换行符（以使用最多的模式为准）
eol.auto=1
# 是否显示换行符
view.eol=0

##################################################
# 缩进相关
##################################################

# Tab 制表符的宽度（按空格数计）
tabsize=4
# 缩进的宽度（按空格数计）
indent.size=4
# 缩进里是否尽可能地使用 tab
use.tabs=0
# 是否根据内容的上下文情况来决定 tabsize, indent.size 和 use.tabs 三个选项
indent.auto=0
# 在缩进里按 tab 时是否换成 indent.size 个宽度而不是插入一个 tab
tab.indents=1
# 在缩进里按回退时是否回退掉一个缩进
backspace.unindents=1
# 是否启用自动缩进功能
indent.automatic=1
# 是否缩进组合语句开始符后面的大括号行（GNU C 的缩进方法）
indent.opening=0
indent.closing=0
# 1 只在真实的缩进空白内显示缩进向导，2 根据下一个非空行显示缩进向导，3 根据前一个和后一个非空行显示缩进向导
view.indentation.examine=3
# 当括号被高亮时，是否同时高亮对应的缩进向导
highlight.indentation.guides=1

##################################################
# 单词补全与 API 提示相关
##################################################

# 单词补全功能在当前文档只有一个以光标所在处的字符开始时，是否要弹出 autocompletion list。可以按 tab 选择要补全的单词
# 关闭可以避免文件大时速度慢
autocompleteword.automatic=0
# 当 autocompletion list 要弹出时，如果只有一个元素存在于 list 里，是否自动选择并插入该元素（此时 list 不会再弹出）
autocomplete.choose.single=0
# 自动补全是否忽略大小写
#autocomplete.*.ignorecase=1
# 启动弹出自动补全 list 的字符
#autocomplete.*.start.characters=
# 触发自动补全完成的字符
#autocomplete.*.fillups=
# API 提示是否忽略大小写
#calltip.*.ignorecase=1
# API 提示里被认成单词的字符集合
#calltip.*.word.characters=
# API 提示里代表参数开始的字符
#calltip.*.parameters.start=
# API 提示里代表参数结尾的字符
#calltip.*.parameters.end=
# API 提示里代表参数分隔的字符
#calltip.*.parameters.separators=
# 终止 API 提示的字符。API 注释可以写在该字符后面，以显示在第二行
#calltip.*.end.definition=

##################################################
# 快捷键
##################################################

user.shortcuts=\
# F2|IDM_FINDNEXTBACK|\
# F3|IDM_FINDNEXT|\
# F4|IDM_COMPILE|\
# F5|IDM_GO|\
# F9|IDM_OPENGLOBALPROPERTIES|\
# Ctrl+A|IDM_SELECTALL|\
# Ctrl+B|IDM_MATCHBRACE|\
# Ctrl+C|IDM_COPY|\
# Ctrl+D|2338|\
# Ctrl+E|2318|\
# Ctrl+F|IDM_FIND|\
# Ctrl+G|2316|\
# Ctrl+H|2304|\
# Ctrl+I|IDM_COMPLETE|\
# Ctrl+J|2300|\
# Ctrl+K|2302|\
# Ctrl+L|2306|\
# Ctrl+M|2338|\
# Ctrl+N|2322|\
# Ctrl+O|IDM_SAVEALL|\
# Ctrl+P|2320|\
# Ctrl+Q|IDM_QUIT|\
# Ctrl+R|IDM_REPLACE|\
# Ctrl+S|IDM_SAVE|\
# Ctrl+T|IDM_NEW|\
# Ctrl+U|IDM_ABBREV|\
# Ctrl+V|IDM_PASTE|\
# Ctrl+W|IDM_CLOSE|\
# Ctrl+X|IDM_CUT|\
# Ctrl+Y|IDM_REDO|\
# Ctrl+Z|IDM_UNDO|\
# Ctrl+[|2308|\
# Ctrl+]|2310|\
# Ctrl+/|IDM_INCSEARCH|\
# Ctrl+;|2314|\
# Ctrl+'|2331|\
# Ctrl+Enter|IDM_COMPLETEWORD|\
# Alt+A|IDM_TOGGLE_FOLDALL|\
# Alt+B|IDM_BOOKMARK_PREV|\
# Alt+G|IDM_GOTO|\
# Alt+L|2396|\
# Alt+O|IDM_TOGGLEOUTPUT|\
# Alt+Q|IDM_QUIT|\
# Alt+R|IDM_BOOKMARK_TOGGLE|\
# Alt+V|IDM_TOGGLEPARAMETERS|\
# Alt+W|2343|\
# Alt+X|IDM_EXPAND|\
# Alt+Z|2342|\
# Alt+Left|2313|\
# Alt+Right|2315|


[Context Menu]

user.context.menu=\
||\
Block Comment or Uncomment|IDM_BLOCK_COMMENT|\
Stream Comment|IDM_STREAM_COMMENT|\
Box Comment|IDM_BOX_COMMENT|\
||\
Make Selection Uppercase (Ctrl+Shift+U)|IDM_UPRCASE|\
Make Selection Lowercase (Ctrl+U)|IDM_LWRCASE|\
||\
Find in Files|IDM_FINDINFILES|\

##################################################
# 本地化
##################################################

# 本地化文件
locale.properties=$(SciteDefaultHome)/other/locale/$(system.locale).properties
# 未翻译的项使用的替代符号
#translation.missing=

##################################################
# 全局 Lua 扩展
##################################################

# 启动时的 Lua 脚本
ext.lua.startup.script=$(SciteDefaultHome)/scite.lua
# 修改 Lua 脚本并保存时是否重新初始化所有变量
ext.lua.auto.reload=1
# 修改 Lua 脚本并保存时是否重新加载 Lua 脚本并重新初始化所有变量（类似 PHP 的运行模型）
ext.lua.reset=0

##################################################
# 全局命令绑定按键
##################################################

# 测试
# command.name.41.*=Test
# command.subsystem.41.*=3
# command.save.before.41.*=2
# command.41.*=test
# command.shortcut.41.*=F12

[Side Bar]
command.checked.9.*=$(sidebar.show)
command.name.9.*=SideBar
command.9.*=SideBar_ShowHide
command.mode.9.*=subsystem:lua,savebefore:no
CN_SIDEBAR=9
# Set show(1) or hide(0) to SciTE start
sidebar.show=1
# Set default settings for Functions/Procedures List
sidebar.functions.flags=0
sidebar.functions.params=0

[Edit Color]
command.name.12.*=Edit Colour
command.subsystem.12.*=3
command.save.before.12.*=2
command.12.*=edit_colour
command.shortcut.12.*=Ctrl+Shift+C

[Switch Page Code]
command.name.13.*=Switch Encoding
command.subsystem.13.*=3
command.save.before.13.*=2
command.13.*=switch_encoding
command.shortcut.13.*=Alt+E

[SVN]
# setup TortoiseSVN folder path
TortoiseSVNPath=C:\Program Files\TortoiseSVN\bin

command.name.14.*=SVN Update File
command.14.*="$(TortoiseSVNPath)\TortoiseProc.exe" /command:update /path:"$(FilePath)" /notempfile /closeonend:0
command.mode.14.*=subsystem:shellexec,savebefore:yes,quiet:yes

command.name.15.*=SVN Commit File
command.15.*="$(TortoiseSVNPath)\TortoiseProc.exe" /command:commit /path:"$(FilePath)" /notempfile /closeonend:0
command.mode.15.*=subsystem:shellexec,savebefore:yes,quiet:yes


command.name.16.*=SVN Add File
command.16.*="$(TortoiseSVNPath)\TortoiseProc.exe" /command:add /path:"$(FilePath)" /notempfile /closeonend:0
command.mode.16.*=subsystem:shellexec,savebefore:yes,quiet:yes


####################################################################################################
####################################################################################################
## 词法和语言
####################################################################################################
####################################################################################################

##################################################
# 词法模板
##################################################

# 只有 braces.{lexer}.style 这个 style 号（默认为 0）能用于括号匹配高亮
#braces.{lexer}.style=

# 自动补全是否忽略大小写
#autocomplete.{lexer}.ignorecase=
# 启动自动补全功能的字符
#autocomplete.{lexer}.start.characters=
# 完成自动补全的字符
#autocomplete.{lexer}.fillups=

# API 提示是否忽略大小写
#calltip.{lexer}.ignorecase=
# API 提示里被认成单词的字符集合
#calltip.{lexer}.word.characters=
# API 提示里代表参数开始的字符
#calltip.{lexer}.parameters.start=
# API 提示里代表参数结尾的字符
#calltip.{lexer}.parameters.end=
# API 提示里代表参数分隔的字符
#calltip.{lexer}.parameters.separators=
# 终止 API 提示的字符。API 注释可以写在该字符后面，以显示在第二行
#calltip.{lexer}.end.definition=

# 注释相关
#comment.block.{lexer}=
#comment.block.at.line.start.{lexer}=
#comment.stream.start.{lexer}=
#comment.stream.end.{lexer}=
#comment.box.start.{lexer}=
#comment.box.middle.{lexer}=
#comment.box.end.{lexer}=

##################################################
# 样式模板
##################################################

# 全局
#style.{lexer}.32=
# 行号
#style.{lexer}.33=
# 匹配的括号
#style.{lexer}.34=
# 不匹配的括号
#style.{lexer}.35=
# 控制符
#style.{lexer}.36=
# 缩进向导
#style.{lexer}.37=
# API 提示
#style.{lexer}.38=
# 将来用
#style.{lexer}.39=

##################################################
# 语言模板
##################################################

# 语言文件定义
#file.patterns.{lang}=*.{lang}
# 标志符定义
#word.characters.{filepattern}=
# 空白符定义
#whitespace.characters.{filepattern}=
# 1 只在真实的缩进空白内显示缩进向导，2 根据下一个非空行显示缩进向导，3 根据前一个和后一个非空行显示缩进向导
#view.indentation.examine.{filepattern}=
# 文件的默认打开路径
#openpath.{filepattern}=
# 打开文件的后缀
#open.suffix.{filepattern}=
# 缩写
#abbreviations.{filepattern}=
# API
#api.{filepattern}=
# 词法
#lexer.{filepattern}=
# 词法路径
#lexerpath.{filepattern}=
# 关键字
#keywords.{filepattern}=
#keywords2.{filepattern}=
#keywords3.{filepattern}=
#keywords4.{filepattern}=
#keywords5.{filepattern}=
#keywords6.{filepattern}=
#keywords7.{filepattern}=
#keywords8.{filepattern}=
#keywords9.{filepattern}=
# 预处理
#preprocessor.symbol.{filepattern}
#preprocessor.start.{filepattern}
#preprocessor.middle.{filepattern}
#preprocessor.end.{filepattern}
# 命令
#command.compile.{filepattern}=
#command.compile.subsystem.{filepattern}=
#command.build.{filepattern}=
#command.build.subsystem.{filepattern}=
#command.build.directory.{filepattern}=
#command.go.{filepattern}=
#command.go.subsystem.{filepattern}=
#command.go.needs.{filepattern}=
#command.go.needs.subsystem.{filepattern}=
# 第 {number} 个命令名称
#command.name.{number}.{filepattern}=
# 第 {number} 个命令
#command.{number}.{filepattern}=
#command.is.filter.{number}.{filepattern}=
# 第 {number} 个命令所在的子系统
#command.subsystem.{number}.{filepattern}=
# 执行第 {number} 个命令之前是否保存
#command.save.before.{number}.{filepattern}=
#command.input.{number}.{filepattern}=
#command.replace.selection.{number}.{filepattern}=
#command.quiet.{number}.{filepattern}=
#command.mode.{number}.{filepattern}=
# 给第 {number} 个命令定义快捷键，如：Ctrl+1，默认 Ctrl+1 到 Ctrl+9 被定义给 1 到 9 号命令
#command.shortcut.{number}.{filepattern}=
#command.help.{filepattern}=
#command.help.subsystem.{filepattern}=
# 缩进相关
#tab.size.{filepattern}=
#indent.size.{filepattern}=
#use.tabs.{filepattern}=
#indent.maintain.{filepattern}=
# 决定下一行是否要缩进的词素集合定义
#statement.indent.{filepattern}=
# 决定当前行是否要终止下一行的缩进的结尾符集合定义
#statement.end.{filepattern}=
# 往回看几行以决定语句的缩进，设为 1 行，对 C、PHP 之类的语言有意义：if (true)\n break; 之后恢复缩进
#statement.lookback.{filepattern}=
# 一个组合语句块的起始词素集合定义
#block.start.{filepattern}=
# 一个组合语句块的结尾词素集合定义
#block.end.{filepattern}=
# 各语言的扩展（目前只支持 Lua）
#extension.{filepattern}=

##################################################
# 加载词法和语言
##################################################

# keywords
import lang/keywords

# hypertext (html, php, tpl, ...)
import lang/hypertext

# cpp (c, c++, java, javascript, ...)
import lang/cpp

# css
import lang/css/css

# python
import lang/python/python

# lua
import lang/lua/lua

# sql
import lang/sql/sql

# props
import lang/props/props

# conf
import lang/conf/conf

# makefile
import lang/makefile/makefile
