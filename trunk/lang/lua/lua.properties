####################################################################################################
####################################################################################################
## 词法
####################################################################################################
####################################################################################################

# 只有 braces.lua.style 这个 style 号（默认为 0）能用于括号匹配高亮
braces.lua.style=10

# 自动补全是否忽略大小写
autocomplete.lua.ignorecase=1
# 启动自动补全功能的字符
autocomplete.lua.start.characters=
# 完成自动补全的字符
autocomplete.lua.fillups=(

# API 提示是否忽略大小写
calltip.lua.ignorecase=1
# API 提示里被认成单词的字符集合
calltip.lua.word.characters=$(chars.alnum)_.
# API 提示里代表参数开始的字符
calltip.lua.parameters.start=(
# API 提示里代表参数结尾的字符
calltip.lua.parameters.end=,
# API 提示里代表参数分隔的字符
calltip.lua.parameters.separators=)
# 终止 API 提示的字符。API 注释可以写在该字符后面，以显示在第二行
calltip.lua.end.definition=)

# 注释相关
comment.block.lua=--
comment.block.at.line.start.lua=1
comment.stream.start.lua=--[[
comment.stream.end.lua=]]
comment.box.start.lua=--[[
comment.box.middle.lua=--
comment.box.end.lua=]]

####################################################################################################
####################################################################################################
## 语言
####################################################################################################
####################################################################################################

# 语言文件定义
file.patterns.lua=*.lua
filter.lua=Lua (*.lua)|$(file.patterns.lua)|
# 标志符定义
word.characters.$(file.patterns.lua)=$(chars.alnum)_
# 空白符定义
#whitespace.characters.$(file.patterns.lua)=
# 1 只在真实的缩进空白内显示缩进向导，2 根据下一个非空行显示缩进向导，3 根据前一个和后一个非空行显示缩进向导
view.indentation.examine.$(file.patterns.lua)=2
# 文件的默认打开路径
#openpath.$(file.patterns.lua)=
# 打开文件的后缀
#open.suffix.$(file.patterns.lua)=
# 缩写
abbreviations.$(file.patterns.lua)=$(SciteDefaultHome)/lang/lua/lua.abbrev
# API
api.$(file.patterns.lua)=$(SciteDefaultHome)/lang/lua/lua.api
# 词法
lexer.$(file.patterns.lua)=lua
# 词法路径
#lexerpath.$(file.patterns.lua)=
# 关键字
keywords.$(file.patterns.lua)=$(keywordclass.lua)
keywords2.$(file.patterns.lua)=$(keywordclass2.lua)
keywords3.$(file.patterns.lua)=$(keywordclass3.lua)
#keywords4.$(file.patterns.lua)=
#keywords5.$(file.patterns.lua)=
#keywords6.$(file.patterns.lua)=
#keywords7.$(file.patterns.lua)=
#keywords8.$(file.patterns.lua)=
#keywords9.$(file.patterns.lua)=
# 预处理
#preprocessor.symbol.$(file.patterns.lua)
#preprocessor.start.$(file.patterns.lua)
#preprocessor.middle.$(file.patterns.lua)
#preprocessor.end.$(file.patterns.lua)
# 命令
#command.compile.$(file.patterns.lua)=
#command.compile.subsystem.$(file.patterns.lua)=
#command.build.$(file.patterns.lua)=
#command.build.subsystem.$(file.patterns.lua)=
#command.build.directory.$(file.patterns.lua)=
command.go.$(file.patterns.lua)=lua $(FilePath)
command.go.subsystem.$(file.patterns.lua)=0
#command.go.needs.$(file.patterns.lua)=
#command.go.needs.subsystem.$(file.patterns.lua)=
# 第 {number} 个命令名称
#command.name.{number}.$(file.patterns.lua)=
# 第 {number} 个命令
#command.{number}.$(file.patterns.lua)=
#command.is.filter.{number}.$(file.patterns.lua)=
# 第 {number} 个命令所在的子系统
#command.subsystem.{number}.$(file.patterns.lua)=
# 执行第 {number} 个命令之前是否保存
#command.save.before.{number}.$(file.patterns.lua)=
#command.input.{number}.$(file.patterns.lua)=
#command.replace.selection.{number}.$(file.patterns.lua)=
#command.quiet.{number}.$(file.patterns.lua)=
#command.mode.{number}.$(file.patterns.lua)=
# 给第 {number} 个命令定义快捷键，如：Ctrl+1，默认 Ctrl+1 到 Ctrl+9 被定义给 1 到 9 号命令
#command.shortcut.{number}.$(file.patterns.lua)=
#command.help.$(file.patterns.lua)=
#command.help.subsystem.$(file.patterns.lua)=
# 缩进相关
tab.size.$(file.patterns.lua)=4
indent.size.$(file.patterns.lua)=4
use.tabs.$(file.patterns.lua)=0
indent.maintain.$(file.patterns.lua)=0
# 决定下一行是否要缩进的词素集合定义
statement.indent.$(file.patterns.lua)=5 do else function then
# 决定当前行是否要终止下一行的缩进的结尾符集合定义
statement.end.$(file.patterns.lua)=
# 往回看几行以决定语句的缩进，设为 1 行，对 C、PHP 之类的语言有意义：if (true)\n break; 之后恢复缩进
statement.lookback.$(file.patterns.lua)=0
# 一个组合语句块的起始词素集合定义
block.start.$(file.patterns.lua)=5 do then
# 一个组合语句块的结尾词素集合定义
block.end.$(file.patterns.lua)=5 end 
# 各语言的扩展（目前只支持 Lua）
extension.$(file.patterns.lua)=$(SciteDefaultHome)/lang/lua/lua.lua
