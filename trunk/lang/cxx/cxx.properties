# 语言文件定义
file.patterns.cxx=*.cxx;*.cpp;*.hxx;*.hpp
# 标志符定义
word.characters.$(file.patterns.cxx)=$(chars.alnum)_
# 空白符定义
#whitespace.characters.$(file.patterns.cxx)=
# 1 只在真实的缩进空白内显示缩进向导，2 根据下一个非空行显示缩进向导，3 根据前一个和后一个非空行显示缩进向导
view.indentation.examine.$(file.patterns.cxx)=3
# 文件的默认打开路径
#openpath.$(file.patterns.cxx)=
# 打开文件的后缀
#open.suffix.$(file.patterns.cxx)=
# 缩写
abbreviations.$(file.patterns.cxx)=$(SciteDefaultHome)/lang/cxx/cxx.abbrev
# API
api.$(file.patterns.cxx)=$(SciteDefaultHome)/lang/cxx/cxx.api
# 词法
lexer.$(file.patterns.cxx)=cpp
# 词法路径
#lexerpath.$(file.patterns.cxx)=
# 关键字
keywords.$(file.patterns.cxx)=$(keywordclass.cxx)
keywords2.$(file.patterns.cxx)=$(keywordclass2.cxx)
keywords3.$(file.patterns.cxx)=$(keywordclass3.cxx)
keywords4.$(file.patterns.cxx)=$(keywordclass4.cxx)
#keywords5.$(file.patterns.cxx)=
#keywords6.$(file.patterns.cxx)=
#keywords7.$(file.patterns.cxx)=
#keywords8.$(file.patterns.cxx)=
#keywords9.$(file.patterns.cxx)=
# 预处理
preprocessor.symbol.$(file.patterns.cxx)=#
preprocessor.start.$(file.patterns.cxx)=if ifdef ifndef
preprocessor.middle.$(file.patterns.cxx)=else elif
preprocessor.end.$(file.patterns.cxx)=endif
# 命令
#command.compile.$(file.patterns.cxx)=
#command.compile.subsystem.$(file.patterns.cxx)=
#command.build.$(file.patterns.cxx)=
#command.build.subsystem.$(file.patterns.cxx)=
#command.build.directory.$(file.patterns.cxx)=
#command.go.$(file.patterns.cxx)=
#command.go.subsystem.$(file.patterns.cxx)=
#command.go.needs.$(file.patterns.cxx)=
#command.go.needs.subsystem.$(file.patterns.cxx)=
# 第 {number} 个命令名称
#command.name.{number}.$(file.patterns.cxx)=
# 第 {number} 个命令
#command.{number}.$(file.patterns.cxx)=
#command.is.filter.{number}.$(file.patterns.cxx)=
# 第 {number} 个命令所在的子系统
#command.subsystem.{number}.$(file.patterns.cxx)=
# 执行第 {number} 个命令之前是否保存
#command.save.before.{number}.$(file.patterns.cxx)=
#command.input.{number}.$(file.patterns.cxx)=
#command.replace.selection.{number}.$(file.patterns.cxx)=
#command.quiet.{number}.$(file.patterns.cxx)=
#command.mode.{number}.$(file.patterns.cxx)=
# 给第 {number} 个命令定义快捷键，如：Ctrl+1，默认 Ctrl+1 到 Ctrl+9 被定义给 1 到 9 号命令
#command.shortcut.{number}.$(file.patterns.cxx)=
#command.help.$(file.patterns.cxx)=
#command.help.subsystem.$(file.patterns.cxx)=
# 缩进相关
tab.size.$(file.patterns.cxx)=4
indent.size.$(file.patterns.cxx)=4
use.tabs.$(file.patterns.cxx)=0
indent.maintain.$(file.patterns.cxx)=0
# 决定下一行是否要缩进的词素集合定义
statement.indent.$(file.patterns.cxx)=5 if else for while switch
# 决定当前行是否要终止下一行的缩进的结尾符集合定义
statement.end.$(file.patterns.cxx)=10 ;
# 往回看几行以决定语句的缩进，设为 1 行，对 C、PHP 之类的语言有意义：if (true)\n break; 之后恢复缩进
statement.lookback.$(file.patterns.cxx)=1
# 一个组合语句块的起始词素集合定义
block.start.$(file.patterns.cxx)=10 {
# 一个组合语句块的结尾词素集合定义
block.end.$(file.patterns.cxx)=10 }
# 各语言的扩展（目前只支持 Lua）
extension.$(file.patterns.cxx)=$(SciteDefaultHome)/lang/cxx/cxx.lua
